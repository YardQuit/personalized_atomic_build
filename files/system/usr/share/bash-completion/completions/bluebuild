_bluebuild() {
    local i cur prev opts cmd
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd=""
    opts=""

    for i in ${COMP_WORDS[@]}
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="bluebuild"
                ;;
            bluebuild,bug-report)
                cmd="bluebuild__bug__report"
                ;;
            bluebuild,build)
                cmd="bluebuild__build"
                ;;
            bluebuild,completions)
                cmd="bluebuild__completions"
                ;;
            bluebuild,generate)
                cmd="bluebuild__generate"
                ;;
            bluebuild,help)
                cmd="bluebuild__help"
                ;;
            bluebuild,rebase)
                cmd="bluebuild__rebase"
                ;;
            bluebuild,template)
                cmd="bluebuild__generate"
                ;;
            bluebuild,update)
                cmd="bluebuild__upgrade"
                ;;
            bluebuild,upgrade)
                cmd="bluebuild__upgrade"
                ;;
            bluebuild__help,bug-report)
                cmd="bluebuild__help__bug__report"
                ;;
            bluebuild__help,build)
                cmd="bluebuild__help__build"
                ;;
            bluebuild__help,completions)
                cmd="bluebuild__help__completions"
                ;;
            bluebuild__help,generate)
                cmd="bluebuild__help__generate"
                ;;
            bluebuild__help,help)
                cmd="bluebuild__help__help"
                ;;
            bluebuild__help,rebase)
                cmd="bluebuild__help__rebase"
                ;;
            bluebuild__help,upgrade)
                cmd="bluebuild__help__upgrade"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        bluebuild)
            opts="-v -q -h -V --log-out --verbose --quiet --help --version build generate template upgrade update rebase bug-report completions help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --log-out)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__bug__report)
            opts="-r -v -q -h --recipe-path --verbose --quiet --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --recipe-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -r)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__build)
            opts="-p -c -r -f -a -s -U -P -B -I -S -R -v -q -h --push --platform --compression-format --retry-push --retry-count --force --archive --registry-path --registry-namespace --no-sign --squash --registry --username --password --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help [RECIPE]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --platform)
                    COMPREPLY=($(compgen -W "native linux/amd64 linux/arm64" -- "${cur}"))
                    return 0
                    ;;
                --compression-format)
                    COMPREPLY=($(compgen -W "gzip zstd" -- "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -W "gzip zstd" -- "${cur}"))
                    return 0
                    ;;
                --retry-count)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --archive)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -a)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry-namespace)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --username)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -U)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --password)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -P)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__completions)
            opts="-v -q -h --verbose --quiet --help bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__generate)
            opts="-o -d -t -B -I -S -R -v -q -h --output --registry --registry-namespace --display-full-recipe --syntax-theme --platform --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help [RECIPE]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --output)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -o)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry-namespace)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --syntax-theme)
                    COMPREPLY=($(compgen -W "mocha-dark ocean-dark ocean-light eighties-dark inspired-github solarized-dark solarized-light" -- "${cur}"))
                    return 0
                    ;;
                -t)
                    COMPREPLY=($(compgen -W "mocha-dark ocean-dark ocean-light eighties-dark inspired-github solarized-dark solarized-light" -- "${cur}"))
                    return 0
                    ;;
                --platform)
                    COMPREPLY=($(compgen -W "native linux/amd64 linux/arm64" -- "${cur}"))
                    return 0
                    ;;
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__generate)
            opts="-o -d -t -B -I -S -R -v -q -h --output --registry --registry-namespace --display-full-recipe --syntax-theme --platform --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help [RECIPE]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --output)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -o)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --registry-namespace)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --syntax-theme)
                    COMPREPLY=($(compgen -W "mocha-dark ocean-dark ocean-light eighties-dark inspired-github solarized-dark solarized-light" -- "${cur}"))
                    return 0
                    ;;
                -t)
                    COMPREPLY=($(compgen -W "mocha-dark ocean-dark ocean-light eighties-dark inspired-github solarized-dark solarized-light" -- "${cur}"))
                    return 0
                    ;;
                --platform)
                    COMPREPLY=($(compgen -W "native linux/amd64 linux/arm64" -- "${cur}"))
                    return 0
                    ;;
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help)
            opts="build generate upgrade rebase bug-report completions help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__bug__report)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__build)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__completions)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__generate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__rebase)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__help__upgrade)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__rebase)
            opts="-r -f -B -I -S -R -v -q -h --reboot --force --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help <RECIPE>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__upgrade)
            opts="-r -f -B -I -S -R -v -q -h --reboot --force --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help <RECIPE>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        bluebuild__upgrade)
            opts="-r -f -B -I -S -R -v -q -h --reboot --force --build-driver --inspect-driver --signing-driver --run-driver --verbose --quiet --help <RECIPE>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --build-driver)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                -B)
                    COMPREPLY=($(compgen -W "buildah podman docker" -- "${cur}"))
                    return 0
                    ;;
                --inspect-driver)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                -I)
                    COMPREPLY=($(compgen -W "skopeo podman docker" -- "${cur}"))
                    return 0
                    ;;
                --signing-driver)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                -S)
                    COMPREPLY=($(compgen -W "cosign" -- "${cur}"))
                    return 0
                    ;;
                --run-driver)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                -R)
                    COMPREPLY=($(compgen -W "podman docker" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _bluebuild -o nosort -o bashdefault -o default bluebuild
else
    complete -F _bluebuild -o bashdefault -o default bluebuild
fi
